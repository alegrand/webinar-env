#+TITLE: Complete Use Case Demo
#+AUTHOR: Michael Mercier\newline INRIA - France
#+DATE: April 5, 2016 -- Reproducible Research Webinar \mylogos

* The use case: Batsim

This a description of the use case that I was facing for my last paper:

We have a simulator that we built (Batsim) which is simulating job scheduling
in a cluster. It communicates with different schedulers implemented by
several people and in various languages. I needed an environment to
develop my simulator and run my experiments that I could share with the
other developers of the different components and with basically
any other people that would like to create and evaluate a new
scheduler. Of course the main purpose is the experiment reproducibility, but
this highlights the fact that *improving reproducibility also improves the
way you work with people*.

** Build your base environment using Kameleon

First I build my own environment using Kameleon. Here is a sample of the recipe
that installs the scheduler of a colleague:
#+BEGIN_SRC yaml

- install dependencies:
  - exec_in: |
      apt-get -y --force-yes install \
      liblog-log4perl-perl \
      libjson-perl \
      liblist-moreutils-perl \
      libfile-slurp-perl \
      2>&1
- get_it:
  - exec_in: |
      cd $$simctn_dir
      git clone https://github.com/wagnerf42/batch-simulator.git
  - exec_in: |
      cd $$simctn_dir/batch-simulator
      git checkout 12df12a
      cd ProcessorRange
      perl Makefile.PL
      make
      make install
      cd ..
      cp log4perl.conf.template log4perl.conf

#+END_SRC

It is a good example of the complexity of rebuilding some research code: You
need the right dependencies, you need to fix the git version so the next
upgrade will not break your own code, and you need to know how to build,
install and configure the tool. These few lines are really easy to write
while you know your tool but it can take hours to somebody (even you in
some months) to do it again if it was not documented like this: You can
see this file like an executable installation documentation of your code.

The whole kameleon recipes are available on the [[http://gforge.inria.fr/scm/?group_id=7711][inria forge]].
As this process is a bit too long for a demo we will use the generated images
directly. But it is recommended to do it by yourself before the webinar so you
will have the image ready for the rest of the tutorial.

For the people that want to skip this step you can download the tarball or pull
it from the Docker Hub.

TODO link to the docker image + docker pull command

For the brave and the curious, to build the image using Kameleon, first you
need to install it using the [[http://kameleon.imag.fr/installation.html][official documentation]].

By default, this recipe is isolating the environment that it is building
using a ``chroot``: It comes with no dependencies but it you need to be root
on the machine. You can also use VirtualBox using the right ``extend`` in the
begining of the recipe.

*** Warning
      Depending on your system and the backend you
      choosed, you may have to install the recipe building  dependencies.

Then run the build:
#+BEGIN_SRC sh
    kameleon build debian8_batsim.yaml
#+END_SRC

* Share reproducible experiment using reprozip

For this demo we will follow these steps:
1. We will trace an experiment and pack it
2. We will copy the package to an other environment
3. Re-run the experiment
4. Check that the results are the same

** Trace an experiment

To be sure that =reprozip= is working properly we will
Reprozip is twofold:
   - =reprozip= for tracing and packing (needed for 1.)
   - =reprounzip= for unpacking and re-running (needed for 3.)

If you are using the provided environement reprozip is already installed.

First install reprozip: See [[http://reprozip.readthedocs.org/en/latest/install.html][install documentation]]

On Debian-based system do:
#+BEGIN_SRC sh
 sudo apt-get install python-dev libsqlite3-dev
 sudo pip install reprozip
#+END_SRC


