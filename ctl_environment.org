
#+TITLE: Controlling your environment
#+AUTHOR: \\ \vspace{0.1cm} Cristian Ruiz, Michael Mercier\\ \vspace{0.1cm} INRIA - France \vspace{0.1cm}
#+DATE: April 5, 2016 -- Reproducible Research Webinar

#+OPTIONS: H:2
#+BEAMER_COLOR_THEME:
#+BEAMER_FONT_THEME:
#+BEAMER_HEADER:
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+BEAMER_INNER_THEME:
#+BEAMER_OUTER_THEME:
#+BEAMER_THEME: default
#+LATEX_CLASS: beamer


#+OPTIONS:   H:2 toc:nil

#+LATEX_HEADER: \def\inriaproject{Inria}
#+LATEX_HEADER: \def\tutelle{RR Webinar}


#+LATEX_HEADER: \usepackage{multirow}
#+LaTeX_HEADER: \usepackage{minted}
#+LaTeX_HEADER: \usepackage{fontspec}
#+LaTeX_HEADER: \usepackage{graphicx}
#+LaTeX_HEADER: \usepackage{subcaption}
#+latex_header: \usepackage{./theme/beamerthemeCristian}
#+LaTeX_HEADER: \usepackage{color}
#+latex_header: \newminted{ruby}{fontsize=\scriptsize}
#+latex_header: \usepackage[absolute,overlay]{textpos}
#+latex_header: \setlength{\TPHorizModule}{\paperwidth}
#+latex_header: \setlength{\TPVertModule}{\paperheight}
#+latex_header: \textblockorigin{0mm}{0mm}
#+LATEX_HEADER: \usepackage{natbib}
#+LATEX_HEADER: \usepackage{bibentry}
#+LATEX_HEADER: \newcommand\Fontvi{\fontsize{6}{7.2}\selectfont}
#+LATEX_HEADER: \newcommand{\bottomcite}[1]{\fbox{\vbox{\footnotesize #1}}}
#+LATEX_HEADER: \nobibliography*
#+BIND: org-latex-title-command ""



#+BEGIN_LaTeX

\sloppy
\frame{
  \thispagestyle{empty}
  \titlepage
  \begin{center}
    \includegraphics[height=1.2cm]{logos/inr_logo_sans_sign_coul.png}
    \hspace{0.5cm}
  \insertlogo{\includegraphics[height=1.2cm]{logos/grid5000.png}}
   \hspace{0.5cm}

  \end{center}

}

#+END_LaTex




* setup								   :noexport:

** Download beamer theme and logos

#+BEGIN_SRC sh
 mkdir theme
 wget https://raw.githubusercontent.com/camilo1729/latex-tools/master/beamer_theme/beamerthemeCristian.sty
 mv beamerthemeCristian.sty  theme/
 wget https://github.com/camilo1729/latex-tools/blob/master/logos/grid5000.png
 wget https://github.com/camilo1729/latex-tools/blob/master/logos/inr_logo_sans_sign_coul.png
 mkdir logos
 mv *.png logos
#+END_SRC


* Intro
** People involved

- Arnauld Legrand
- Cristian Ruiz
- Michael Mercier
- Olivier Richard
- Pierre Neyron
- Salem Harrache
** Outline
#+LaTeX: \tableofcontents

* Why is it necessary?
** Motivations

  Reproducible research: What does it mean?
  Need a reminder: See the [[http://newstream.imag.fr/2016-03-07_Reproducible-Research_Arnaud-legrand.mp4][first webinar]])

#+BEGIN_LaTeX
\begin{block}{Definition}
     For anyone to be able to fully reproduce a scientific results from
     experiments to paper
\end{block}
#+END_LaTeX

  Reproducibility is necessary to have a real scientific result

** Problem statement
   Experiment replication is not an easy if you do not care of from the
   begining:
\vspace{0.5cm}

"/The path from having a piece of software running on the programmer's own machine
to getting it running on someone else's machine is fraught with potential pitfalls/"

#+BEGIN_LaTeX
  \bottomcite{Philip J. Guo and Dawson Engler,
     \href{http://www.pgbovine.net/publications/CDE-create-portable-Linux-packages-short-paper_USENIX-2011.pdf}
    {\textit{CDE: Using System Call Interposition to Automatically Create Portable Software Packages}},
    USENIX LISA Conference,2011}
#+END_LaTeX

For reproducible research the scientist provides for both experiment and
   analysis:
  - All the experiment artefacts:
    - input/outputs files
  - All experiments and analysis code
  - Documentation on how to compile, install and run

Still, Several problems may prevent someone to rerun an experiment

** Dependencies and compilation problems

Unresolved dependencies:
#+BEGIN_LaTeX
\begin{figure}[!h]
  \center
  \includegraphics[scale=0.25]{figures/Dependency.png}
  \label{fig:s}
\end{figure}
#+END_LaTeX

Compilation errors:
#+BEGIN_LaTeX
\begin{figure}[!h]
  \center
  \includegraphics[scale=0.25]{figures/Compilation_error.png}
  \label{fig:s}
\end{figure}

  \bottomcite{Collberg, Christian \textit{et Al.},
     \href{http://reproducibility.cs.arizona.edu/v2/RepeatabilityTR.pdf}{\textit{Measuring Reproducibility in Computer Systems Research}},
    \url{http://reproducibility.cs.arizona.edu/}\qquad 2014,2015}
#+END_LaTeX

Less than 50% of experimental setups of papers submitted ACM conferences and journals can be built.

** Other technical issues
- Imprecise documentation: \\
  "/I have no clue about how to install it, configure it or run it!/"

- Dependency Hell: \\
  "/I can't install this dependency package without breaking my entire system/"
- Code rote: \\
  "/This dependency package version is buggy! What was the version that was used to run the experiment in the first place?!?/"

#+BEGIN_LaTeX
  \bottomcite{Carl Boettiger,
     \href{http://www.carlboettiger.info/assets/files/pubs/10.1145/2723872.2723882.pdf}{\textit{An introduction to Docker for reproducible research}},
    ACM SIGOPS Operating Systems Review,2015}
#+END_LaTeX

** Cultural challenges

- Efforts are not rewarded by the current academic research and funding environment
- Software vendors tend to protect their markets through proprietary formats and interfaces
- Investigators naturally tend to want to own and control their research tools
- Even the most generalized software will not be able to meet the needs of every researcher in a field
- The need to derive and publish results as quickly as possible precludes the often slower standards-based development path

#+BEGIN_LaTeX
  \bottomcite{J. T. Dudley and A. J. Butte,
     \href{http://www.nature.com/nbt/journal/v28/n11/pdf/nbt1110-1181.pdf}{\textit{In silico research in the era of cloud computing}},
    \url{Nature Biotechnology}\qquad 2010}
#+END_LaTeX

** Distributing software possibility

#+BEGIN_LaTeX
\begin{figure}[!h]
  \center
\includegraphics[scale=0.4]{figures/CDE_author_user.pdf}
\end{figure}
#+END_LaTeX

** Disseminating science software

#+BEGIN_LaTeX
\begin{figure}[!h]
  \center
\includegraphics[scale=0.7]{figures/virtual_appliances.pdf}
\end{figure}
#+END_LaTeX

** The solution is: Control your environment

The solution is *Control your environment*

You have several options:
   - Use a constrained environment
   - Capture your environment
   - Build your environment

*** Constraint or freedom
    Each of them have different level of contraint and flexibility:
    - The more constraint your environment is, the more simple it is too
    - Freedom comes with responsibility

** Why should I take care of my experiment environment
For myself:
  - For being able to reproduce my own experiment later
  - To remember how I have done my experiment
  - To be able to scale my experiment on other machines
  - Facilitate experiment extensions and modifications
  - Be a better scientist by doing better science :)

For other people: my students, my colleagues, my peers, \dots
  - Allow them to reproduce my experiment and corroborate (or not) my
    results
  - Allow them to modify my experiment to do their own

For everybody:
  - Improve knowledge sharing
  - Increase collaboration possibilities
  - Do better science!

* What is an environment?
** Environment definition
#+BEGIN_LaTeX
\begin{block}{Definition}
   In ou case:
   An environment is a set of tools and materials that permit a complete
   reproducibility of a part or the whole experiment process.
\end{block}
#+END_LaTeX

   TODO: Add a schema with an experiment workflow

   Can be numerous or unique depending on the experiment workflow:
   - Experiment runtime environments
     - local, on a testbed, on a dedicated server,\dots
   - Analysis runtime environments
     - Usually a unique local environment

   Whole environment contains hardware and software information

** Hardware
Necessary when we carry out performance measures

Tools to capture hardware configuration:
  - =dmidecode=
  - hwloc (=lstopo=)
  - proprietary tools (bios, nvidia,\dots)
  - Testbeds hardware description API (Grid'5000, Chameleon)

*** The hardware is not shareable
    As it is no shareable the hardware  environment needs to be documented
    the more exhaustively possible. Of course it depends on the experiments
    so you should find yourself the suitable description grain.

** Software

Different level of environment:
*** Very succinct (usually what is provided, if provided...)                                      :B_definition:
:PROPERTIES:
:BEAMER_env: alertblock
:END:
A minimal description in mail or a README in a git repository

*** Partial
:PROPERTIES:
:BEAMER_env: definition
:END:
A bundle of the experiment tool and it dependencies. It is generally limited
to one language runtime(Pyton, Ruby, Java, \dots)
*** Full
:PROPERTIES:
:BEAMER_env: example
:END:
A complete environment backup with the operating system included
- Virtual machine (VirtualBox, Qemu/KVM, VMware,\dots)
- Linux container tarball (docker, LXC, rkt,\dots)
- Kadeploy image tarball (Grid'5000)

** Types of environments

#+BEGIN_LaTeX
\begin{figure}[!h]
  \center
\includegraphics[scale=0.6]{figures/types_of_environments.pdf}
\end{figure}
#+END_LaTeX

** Software Appliances
*** Advantage 							    :B_block:
    :PROPERTIES:
    :BEAMER_env: block
    :END:

keep everything together:
#+BEGIN_CENTER
OS + configuration + application
#+END_CENTER

*** Some facts							    :B_block:
    :PROPERTIES:
    :BEAMER_env: block
    :END:
- Availability of Testbeds such as Grid'5000, Chameleon, Cloudlab, etc
- Ubiquity of Cloud computing infrastructures.
- Virtualization accessible to almost everyone that has a computer with modest requirements.



* Use a constraint environment
** Use of third party environments

Environment build, specialized, controlled, versioned by somebody else:

#+BEGIN_LaTeX
  \bottomcite{Brammer, Grant R \textit{et Al.},
     \href{http://www.sciencedirect.com/science/article/pii/S187705091100127X}
{\textit{Paper M\^ach\'e: Creating Dynamic Reproducible Science.}},
    \url{International Conference on Computational Science}, ICSS 2011}
#+END_LaTeX

   - Activepapers (Beta)
     - Python or JVM based language
   - SageMathCloud
     - Use Jupyter
       - Julia, Python, R, Haskell, Ruby...
       - 40 languages (partly) supported
   - Default Grid'5000 environments
   - Software appliances market place (Testbed)


Partage: facile
      Portabilité:
      Contrôle: faible
* Capturing an environment
** Capturing an environment
   - several approaches for capturing your environment:
     - export everything (OS + Lib + App)
     - capture only what is needed (App + dependencies)

** Export everything
   A simple way to capture environment is to make a *complete copy* of it.

   It depends on what is your local environment:
   - In a classical environment use a backup tool
     - A simple backup is not easily usable
     - Can be used to generate bootable environment

   - In a VM or any Copy-on-write environment use the instant
       snapshot capability
     - Faster backup and better sharing
     - VM need to be used from the begining (See Constrianed environment)
     - Using VM means degraded performances

   Either case *sharing is complicated*
     - Huge environment images (several Giga Bytes is common)
     - Need a dedicated place to store them (à la market place)

#+BEGIN_LaTeX
  \bottomcite{J. T. Dudley and A. J. Butte,
     \href{http://www.nature.com/nbt/journal/v28/n11/pdf/nbt1110-1181.pdf}{\textit{In silico research in the era of cloud computing}},
    \url{Nature Biotechnology}\qquad 2010}
#+END_LaTeX

** Capture only what is needed
   Use a tracking tool to *capture only what is necessary*.

   Instrumenting a run of your experiment to catch every used material:
      - Binairies/Scripts (experiment.py, Python 2.7)
      - Configuration files (conf.yaml)
      - Librairies (libc, numpy, matplotlib)
      => Create a compress bundle

   Rerun the experiment on another machine:
      1) Import the provided bundle
      2) Initialyse the environment (depends on the tools...)
      3) Rerun the exact same experiment

   Existing tools:
   - [[http://www.pgbovine.net/cde.html][CDE]] (Guo et al., 2011)
   - [[https://vida-nyu.github.io/reprozip/][ReproZip]] (Freire et al., 2013)
   - [[http://reproducible.io/][CARE]] (Janin et al., 2014), l'outil de Thain
   - See [[http://ccl.cse.nd.edu/research/papers/techniques-ipres-2015.pdf][Preserve the Mess or Encourage Cleanliness?]] (Thain et al., 2015)

** Summary

      Partage/portabilité: plus compliqué...

      Contrôle: moyen (possibilité de louper des choses..., entropie
      importante car rien n'incite à faire le ménage et on peut se
      retrouver avec un paquet de trucs inutiles)

      Lisibilité: un gros bundle binaire pas simple à comprendre
      "reverse engineering"

* Building the entire environment

** Environment generation 
We want to have more control over the environment

** Environment generation
#+BEGIN_LaTeX
\begin{figure}[!h]
  \center
\includegraphics[scale=0.6]{figures/Environment_creation.pdf}
\end{figure}
#+END_LaTeX


** Reconstrucability
#+BEGIN_LaTeX
An experimental setup \(E'\) is reconstructable if the following three facts hold:
\begin{itemize}
\item Experimenters have access to the original base experimental setup \(E\).
\item Experimenters know exactly the sequence of actions \\* \(\langle A_{1}, A_{2}, A_{3}, ..., A_{n}\rangle \) that produced \(E'\).
\item {\bf Experimenters are able to change some action \(A_{i}\) and successfully re-construct an experimental setup \(E''\)}.
\end{itemize}
#+END_LaTeX


** Reconstrucability
#+BEGIN_LaTeX

It can be expressed as \(E' = f(E,\langle A_{i} \rangle ) \)
where \( f \) applies \(\langle A_{i} \rangle \) to \(E\) to
derive the experimental setup \(E'\).


Few cases where this hypothesis does not hold:
\begin{itemize}
  \item An action \(A_{i}\) is composed of sub-tasks that are executed concurrently making the process not deterministic.
        For example: \texttt{Makefile} \texttt{-j}.
  \item (\emph{Debian 8}) is validated based on timestamps.
\end{itemize}

Additionally problems:
\begin{itemize}
\item Accessing the same base setup \(E\).
\item Software used is not available anymore.
\end{itemize}

#+END_LaTeX


** How software is installed and configured?

- Here we will talk about the actions \(A_{i}\)

- Source code compilation: 
  #+BEGIN_SRC sh
   $ tar -xzf pdt-3.19.tar.gz
   $ cd pdtoolkit-3.19/
   $./configure -prefix=/usr/local/pdt-install
   $ make clean install
  #+END_SRC
- Need to install all dependencies by hand
- Some skills are required

** How software is installed and configured?

- Package manager:  is a collection of software tools that *automates* the process of *installing*, 
  *upgrading*, *configuring*, and *removing* computer programs for a computer's operating system in a consistent manner

- Examples in the Linux world: APT, yum, pacman, Nix \dots 

- There exists as well package mangers for programming languages: 
  Bundler, CPAN, CRAN, EasyInstall, Go Get, Maven, pip, RubyGems, etc
- Reproducible builds: Nix, Debian snapshot



** How software is installed and configured?

- Configuration management tools: 
  Software Configuration Management encompasses
  the practices and procedures for administering source code,
  producing software development builds, controlling change, and managing software configurations


** DevOps approach

- Dev = Development, Ops= (System) operation
- You have a pile of crusty code that's hard to install
- It's hard to document how to install it
- Why not develop scripts that reliably install your toolset?
  - Because that sounds hard ?
  - but it's more fun than writing documentation

** Tools

- Docker
- Nix
- Packer + Vagrant
- Kameleon
** notes							   :noexport:
I can introduce the definition of reconstructability
      Quelles bonnes propriétés sont elles recherchée?

      Quelles sont les étapes:
      1. Partir de 0
      2. S'assurer qu'on peut reconstruire à chaque instant
      3. Distribuer

      Note: çà veut dire quoi partir de 0 ?
      1. Partir d'une image préexistante considérée comme stable. Avec
         l'effort des reproducible build de debian, c'est pas mal
         (mentionner aussi debian snapshot)
	 - Script, Outils des distributions, VM et container, docker file, vagrant
	 - Nix / Guix
	 - Kameleon
      2. Construire complètement from scratch (même l'OS)
	 - Kameleon

* Comment utiliser un environnement?



** notes
      C'est transverse, comme "comment distribuer" donc à expliquer au
      fur et à mesure
      - VM, container, chroot, bundle python, hdf5 + \dots, \dots
      Faire un petit tableau récapitulatif
* Demo time
** Reprozip
      1. Reprozip (capture) (les autres ayant l'air plus ou moins maintenus)
** Docker
Docker advantages for reproducible research:

- Integrating into local development environments
- Modular reuse
- Portable environments
- Public repositories for sharing
- Versioning

#+BEGIN_LaTeX
  \bottomcite{Carl Boettiger,
     \href{http://www.carlboettiger.info/assets/files/pubs/10.1145/2723872.2723882.pdf}{\textit{An introduction to Docker for reproducible research}},
    ACM SIGOPS Operating Systems Review,2015}
#+END_LaTeX

** Docker advantages

- Portable computation & sharing

#+BEGIN_SRC sh
 $ docker export container-name > container.tar
 $ docker push username/r-recommended
#+END_SRC

- Re-usable modules
#+BEGIN_SRC sh
$ docker run -d --name db training/postgres
$ docker run -d -P --link db:bd training/webapp \
   python app.py
#+END_SRC

- Versioning

#+BEGIN_SRC sh
$ docker history r-base
$ docker tag  d7e5801bb7ac ttimbers/mmp-dyf-skat:latest
#+END_SRC



** Kameleon
      3. Kameleon / example Batsim ?
	 - Success story: un an après, ça marche encore!
